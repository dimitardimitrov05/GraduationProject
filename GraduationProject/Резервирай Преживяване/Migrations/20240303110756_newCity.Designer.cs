// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Резервирай_Преживяване.Data;

#nullable disable

namespace Резервирай_Преживяване.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240303110756_newCity")]
    partial class newCity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Postcode")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a90281d8-1468-4227-90a8-1980af6d9c73"),
                            Name = "Бургас",
                            Postcode = "8000"
                        },
                        new
                        {
                            Id = new Guid("d7733ba3-d547-49f0-b8ad-565fe8681c0c"),
                            Name = "Варна",
                            Postcode = "9000"
                        },
                        new
                        {
                            Id = new Guid("e047a616-3478-4b1f-83ae-5beb281bbf03"),
                            Name = "Силистра",
                            Postcode = "7500"
                        },
                        new
                        {
                            Id = new Guid("3776be48-6186-486f-8a26-daebad673fd2"),
                            Name = "Търговище",
                            Postcode = "7700"
                        },
                        new
                        {
                            Id = new Guid("e85445ae-742d-4d5a-a755-b5f231dbc5f9"),
                            Name = "Ловеч",
                            Postcode = "5500"
                        },
                        new
                        {
                            Id = new Guid("e9466dcd-e63d-4be5-8c95-75b920686317"),
                            Name = "Кърджали",
                            Postcode = "6600"
                        },
                        new
                        {
                            Id = new Guid("68631507-1275-4ad8-817b-97ba02ba117c"),
                            Name = "Пловдив",
                            Postcode = "4000"
                        },
                        new
                        {
                            Id = new Guid("8c55d75c-b1c1-41c6-bea1-e07650b8ded8"),
                            Name = "Добрич",
                            Postcode = "9300"
                        },
                        new
                        {
                            Id = new Guid("0aef8139-0f3c-41b0-b9ee-9cc59de22ba8"),
                            Name = "София",
                            Postcode = "1000"
                        },
                        new
                        {
                            Id = new Guid("f5543649-346f-47e2-aba6-623fb38a272e"),
                            Name = "Благоевград",
                            Postcode = "2700"
                        },
                        new
                        {
                            Id = new Guid("26c5c1d3-6ffa-405b-8302-7ab227269cef"),
                            Name = "Пазарджик",
                            Postcode = "4400"
                        },
                        new
                        {
                            Id = new Guid("c4578143-53d0-4b52-8e8b-338528395052"),
                            Name = "Перник",
                            Postcode = "2300"
                        },
                        new
                        {
                            Id = new Guid("ef063b86-cdf5-4e12-bf90-129845a15033"),
                            Name = "Плевен",
                            Postcode = "5800"
                        },
                        new
                        {
                            Id = new Guid("30814c2d-4a11-49c1-8c2f-a266a90d623c"),
                            Name = "Видин",
                            Postcode = "3700"
                        },
                        new
                        {
                            Id = new Guid("603a5d10-0ae0-4740-9464-d2079220831f"),
                            Name = "Монтана",
                            Postcode = "3400"
                        },
                        new
                        {
                            Id = new Guid("5532a1b4-6da1-43d3-9ee2-0661160e69d8"),
                            Name = "Кюстендил",
                            Postcode = "2500"
                        },
                        new
                        {
                            Id = new Guid("340544e4-9ae1-4bf2-b6b3-662420f46571"),
                            Name = "Ямбол",
                            Postcode = "8600"
                        },
                        new
                        {
                            Id = new Guid("e5a76040-3a1d-408f-86dd-03d193337712"),
                            Name = "Русе",
                            Postcode = "7000"
                        },
                        new
                        {
                            Id = new Guid("2fb005f5-3c58-4976-819b-6bc710ac0b88"),
                            Name = "Враца",
                            Postcode = "3000"
                        },
                        new
                        {
                            Id = new Guid("ef4d92d4-dcbb-4af8-8971-f58b7745dac3"),
                            Name = "Велико Търново",
                            Postcode = "5000"
                        },
                        new
                        {
                            Id = new Guid("bd7ca52e-4080-4af9-bd50-e17464836fdd"),
                            Name = "Шумен",
                            Postcode = "9700"
                        },
                        new
                        {
                            Id = new Guid("552f6c0d-e54a-4d95-9483-e1ee524d23a3"),
                            Name = "Габрово",
                            Postcode = "5300"
                        },
                        new
                        {
                            Id = new Guid("b4ffa563-ed50-43a7-acc0-611492a9bab1"),
                            Name = "Разград",
                            Postcode = "7200"
                        },
                        new
                        {
                            Id = new Guid("c7727ca0-44e0-405d-9a9e-ba2e2e52097e"),
                            Name = "Сливен",
                            Postcode = "8800"
                        },
                        new
                        {
                            Id = new Guid("54f9e438-b030-4a28-ad7a-c038b8ccf158"),
                            Name = "Смолян",
                            Postcode = "4700"
                        },
                        new
                        {
                            Id = new Guid("9d795378-b12e-4169-bfcc-dc329f2ab466"),
                            Name = "Стара Загора",
                            Postcode = "6000"
                        },
                        new
                        {
                            Id = new Guid("68b132ad-2e58-49b7-ab8c-d835cdd97819"),
                            Name = "Хасково",
                            Postcode = "6300"
                        },
                        new
                        {
                            Id = new Guid("59e78340-ddf0-4334-ab05-c09c50fc4c00"),
                            Name = "Банско",
                            Postcode = "2770"
                        },
                        new
                        {
                            Id = new Guid("28ced079-52d2-4b66-bf0e-9dc65da0cb53"),
                            Name = "Мелник",
                            Postcode = "2820"
                        },
                        new
                        {
                            Id = new Guid("af6e3f26-8431-4668-be6f-25df386b1da1"),
                            Name = "Сандански",
                            Postcode = "2800"
                        },
                        new
                        {
                            Id = new Guid("97fd4387-537a-4c98-9ddd-bc36aaf4ca8a"),
                            Name = "Симитли",
                            Postcode = "2730"
                        },
                        new
                        {
                            Id = new Guid("34eae4cd-a8c5-42e3-bb99-2a8473878c4c"),
                            Name = "Айтос",
                            Postcode = "8500"
                        },
                        new
                        {
                            Id = new Guid("5b5c29d4-a4dd-44b5-a6ab-ed2fa02c844a"),
                            Name = "Ахелой",
                            Postcode = "8217"
                        },
                        new
                        {
                            Id = new Guid("7635e9a8-f1cb-4b30-829e-72d2637f2259"),
                            Name = "Балчик",
                            Postcode = "9600"
                        },
                        new
                        {
                            Id = new Guid("13fd8940-634c-4ab7-a4a3-466a5189bde0"),
                            Name = "Банкя",
                            Postcode = "1320"
                        },
                        new
                        {
                            Id = new Guid("d94616ed-36d0-4d74-9a40-141e00da8f94"),
                            Name = "Баня",
                            Postcode = "4360"
                        },
                        new
                        {
                            Id = new Guid("bfafc5c9-9dd3-4ed0-9754-875f0f34ae9a"),
                            Name = "Белоградчик",
                            Postcode = "3900"
                        },
                        new
                        {
                            Id = new Guid("afd5d2de-4c25-4b45-b0f5-bba05fd371dd"),
                            Name = "Бяла",
                            Postcode = "9101"
                        },
                        new
                        {
                            Id = new Guid("e2a1cc46-84b5-4d4f-bebc-5d20768e2867"),
                            Name = "Велинград",
                            Postcode = "4600"
                        },
                        new
                        {
                            Id = new Guid("d3f49c7b-1d5f-4fc7-8ea4-a43563f39596"),
                            Name = "Доспат",
                            Postcode = "4831"
                        },
                        new
                        {
                            Id = new Guid("ffdc01e0-89f0-45a9-8076-e29317678356"),
                            Name = "Дряново",
                            Postcode = "5370"
                        },
                        new
                        {
                            Id = new Guid("3026e531-0740-4c7c-8a2e-58cc75de0cd1"),
                            Name = "Елхово",
                            Postcode = "8700"
                        },
                        new
                        {
                            Id = new Guid("ed14e9be-bdb3-414c-8c41-fcc2152306f4"),
                            Name = "Казанлък",
                            Postcode = "6100"
                        },
                        new
                        {
                            Id = new Guid("b1ca6036-0acf-43ad-b47d-2f997f3c520e"),
                            Name = "Калофер",
                            Postcode = "4370"
                        },
                        new
                        {
                            Id = new Guid("f4cc78bb-fbf7-43b1-9359-4e1237fa8568"),
                            Name = "Карлово",
                            Postcode = "4300"
                        },
                        new
                        {
                            Id = new Guid("09407784-2e88-4bf3-acd9-7ce354c1bda4"),
                            Name = "Китен",
                            Postcode = "8183"
                        },
                        new
                        {
                            Id = new Guid("64503a03-d5b8-4e10-9c1f-a2eab70c4085"),
                            Name = "Клисура",
                            Postcode = "4341"
                        },
                        new
                        {
                            Id = new Guid("53d11eb1-9993-4a28-8ae6-ab13d22adee5"),
                            Name = "Копривщица",
                            Postcode = "2077"
                        },
                        new
                        {
                            Id = new Guid("44618eb5-d643-4f37-96b3-32e6520a1202"),
                            Name = "Лом",
                            Postcode = "3600"
                        },
                        new
                        {
                            Id = new Guid("5a9c297a-df95-49a1-a966-7e477e3869cf"),
                            Name = "Несебър",
                            Postcode = "8230"
                        },
                        new
                        {
                            Id = new Guid("1aa77c31-c728-4cbc-95d2-8a5551c93497"),
                            Name = "Нова Загора",
                            Postcode = "8900"
                        },
                        new
                        {
                            Id = new Guid("556caef9-ef2d-4f0b-81dc-954dad910da7"),
                            Name = "Обзор",
                            Postcode = "8250"
                        },
                        new
                        {
                            Id = new Guid("70e0fbd3-ae17-4db7-8feb-c0358d95cb59"),
                            Name = "Павел Баня",
                            Postcode = "6155"
                        },
                        new
                        {
                            Id = new Guid("e6b4048e-8243-43fa-b076-d58238f9be72"),
                            Name = "Панагюрище",
                            Postcode = "4500"
                        },
                        new
                        {
                            Id = new Guid("ce1f60d6-6bf4-4890-b38c-0e951059d7f8"),
                            Name = "Петрич",
                            Postcode = "2850"
                        },
                        new
                        {
                            Id = new Guid("5df012da-4476-4c06-9eb6-62cac192e8cf"),
                            Name = "Плиска",
                            Postcode = "9920"
                        },
                        new
                        {
                            Id = new Guid("7367a3eb-253b-459a-920e-e54c840875d9"),
                            Name = "Самоков",
                            Postcode = "2000"
                        },
                        new
                        {
                            Id = new Guid("cf853978-5e93-4969-96c7-2c5402db051e"),
                            Name = "Сапарева баня",
                            Postcode = "2650"
                        },
                        new
                        {
                            Id = new Guid("375373aa-a3b6-493b-b0ca-b12293a2dcac"),
                            Name = "Свети власт",
                            Postcode = "8256"
                        },
                        new
                        {
                            Id = new Guid("04246c1e-eb44-4187-9b70-a606344df9e1"),
                            Name = "Созопол",
                            Postcode = "8130"
                        },
                        new
                        {
                            Id = new Guid("b0f65d84-03b1-4f20-bcdf-1a2430010391"),
                            Name = "Троян",
                            Postcode = "5600"
                        },
                        new
                        {
                            Id = new Guid("a1ebc877-fbba-497d-a874-f9bea60a6736"),
                            Name = "Трявна",
                            Postcode = "5350"
                        },
                        new
                        {
                            Id = new Guid("7182b9d1-b9e2-401b-9508-156f147b4be4"),
                            Name = "Хисаря",
                            Postcode = "4180"
                        },
                        new
                        {
                            Id = new Guid("8eae9fa9-e6ba-4a47-9cb7-99044375b9f7"),
                            Name = "Боровец",
                            Postcode = "2010"
                        },
                        new
                        {
                            Id = new Guid("cf172ace-3ac1-47bb-a42f-0267d0e9f7da"),
                            Name = "Пампорово",
                            Postcode = "4870"
                        },
                        new
                        {
                            Id = new Guid("ca9ad0c0-78e8-4a89-ac85-cce9f1343083"),
                            Name = "Овощник",
                            Postcode = "6138"
                        });
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Gym")
                        .HasColumnType("bit");

                    b.Property<bool?>("Parking")
                        .HasColumnType("bit");

                    b.Property<bool?>("Pool")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Restaurant")
                        .HasColumnType("bit");

                    b.Property<bool?>("SpaCenter")
                        .HasColumnType("bit");

                    b.Property<bool?>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Guests")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationUser");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stars")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerNight")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ResortId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Facility", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Resort", "Resort")
                        .WithMany("Facilities")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Landmarks")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", "User")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Resorts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Resort", "Resort")
                        .WithMany("Rooms")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("RoomReservations")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("RoomReservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Navigation("ReservationUsers");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Navigation("Landmarks");

                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationUsers");

                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RoomReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
