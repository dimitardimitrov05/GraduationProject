// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Резервирай_Преживяване.Data;

#nullable disable

namespace Резервирай_Преживяване.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240222073403_moreMigr")]
    partial class moreMigr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Postcode")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ead18fed-2587-45f5-884f-9c2846231c48"),
                            Name = "Бургас",
                            Postcode = "8000"
                        },
                        new
                        {
                            Id = new Guid("dc7a1a55-1e29-4b36-ac4d-54da44d80a89"),
                            Name = "Варна",
                            Postcode = "9000"
                        },
                        new
                        {
                            Id = new Guid("71643f59-332a-4f26-b3a0-7577c2851982"),
                            Name = "Силистра",
                            Postcode = "7500"
                        },
                        new
                        {
                            Id = new Guid("ac12d666-647c-4947-b16e-013224936ef6"),
                            Name = "Търговище",
                            Postcode = "7700"
                        },
                        new
                        {
                            Id = new Guid("e303f03b-a173-4f2c-9ec4-7d87c76de6e9"),
                            Name = "Ловеч",
                            Postcode = "5500"
                        },
                        new
                        {
                            Id = new Guid("422be9d1-d479-489d-a3e8-edb9103955ce"),
                            Name = "Кърджали",
                            Postcode = "6600"
                        },
                        new
                        {
                            Id = new Guid("22d01e9d-42d6-48a8-b7b5-40b7a0335fd8"),
                            Name = "Пловдив",
                            Postcode = "4000"
                        },
                        new
                        {
                            Id = new Guid("56932653-e44f-4ffc-a787-9c7a594fb1ce"),
                            Name = "Добрич",
                            Postcode = "9300"
                        },
                        new
                        {
                            Id = new Guid("dc913012-0346-4b6b-ad3e-baa60f373921"),
                            Name = "София",
                            Postcode = "1000"
                        },
                        new
                        {
                            Id = new Guid("dd9071aa-90e9-454d-a428-c04403dd1342"),
                            Name = "Благоевград",
                            Postcode = "2700"
                        },
                        new
                        {
                            Id = new Guid("9240975a-9dcc-463e-a8cd-d0e6d8da782b"),
                            Name = "Пазарджик",
                            Postcode = "4400"
                        },
                        new
                        {
                            Id = new Guid("d788714f-c18c-4049-86eb-973d1e91773d"),
                            Name = "Перник",
                            Postcode = "2300"
                        },
                        new
                        {
                            Id = new Guid("d90ae475-b25f-4e2f-a39f-285a9d2b3a48"),
                            Name = "Плевен",
                            Postcode = "5800"
                        },
                        new
                        {
                            Id = new Guid("188d12ce-07f3-4c22-8b0f-c8606e2a5af3"),
                            Name = "Видин",
                            Postcode = "3700"
                        },
                        new
                        {
                            Id = new Guid("d16dffdc-887a-4a71-8d3d-7f944be1a868"),
                            Name = "Монтана",
                            Postcode = "3400"
                        },
                        new
                        {
                            Id = new Guid("a81e5328-2da8-4f71-af61-9e13a40a297b"),
                            Name = "Кюстендил",
                            Postcode = "2500"
                        },
                        new
                        {
                            Id = new Guid("a2a8c993-d6e8-483f-9fc6-3c1a5ce58a09"),
                            Name = "Ямбол",
                            Postcode = "8600"
                        },
                        new
                        {
                            Id = new Guid("437939ea-d852-4f69-be3f-44e3b4da04e5"),
                            Name = "Русе",
                            Postcode = "7000"
                        },
                        new
                        {
                            Id = new Guid("0ee0906a-e921-4dd6-95aa-7623347d2c64"),
                            Name = "Враца",
                            Postcode = "3000"
                        },
                        new
                        {
                            Id = new Guid("aedcff98-7786-4818-a224-f8e760587596"),
                            Name = "Велико Търново",
                            Postcode = "5000"
                        },
                        new
                        {
                            Id = new Guid("f86c38de-15a4-4749-88fd-a07d06517746"),
                            Name = "Шумен",
                            Postcode = "9700"
                        },
                        new
                        {
                            Id = new Guid("701ccd93-4a8d-42ab-a9d8-3c8326ed3209"),
                            Name = "Габрово",
                            Postcode = "5300"
                        },
                        new
                        {
                            Id = new Guid("dc614307-aad5-4375-b3b9-3e13bde37b39"),
                            Name = "Разград",
                            Postcode = "7200"
                        },
                        new
                        {
                            Id = new Guid("3b89ecd6-4808-4788-9063-691e9634f6cc"),
                            Name = "Сливен",
                            Postcode = "8800"
                        },
                        new
                        {
                            Id = new Guid("7d7c368e-d32c-4b8d-bdcf-146e0943d6ec"),
                            Name = "Смолян",
                            Postcode = "4700"
                        },
                        new
                        {
                            Id = new Guid("d8a893b3-dd52-4e4a-9baf-7a86dad30b2f"),
                            Name = "Стара Загора",
                            Postcode = "6000"
                        },
                        new
                        {
                            Id = new Guid("b3706008-6f18-4354-9d63-212c4d5a55b6"),
                            Name = "Хасково",
                            Postcode = "6300"
                        },
                        new
                        {
                            Id = new Guid("3189d10f-aba2-403a-809c-409016d0846d"),
                            Name = "Банско",
                            Postcode = "2770"
                        },
                        new
                        {
                            Id = new Guid("7cc70e9f-eb3c-4554-be4f-894b620e02e7"),
                            Name = "Мелник",
                            Postcode = "2820"
                        },
                        new
                        {
                            Id = new Guid("4c8677dd-edd9-4e0d-8e0a-ce8c4d1102af"),
                            Name = "Сандански",
                            Postcode = "2800"
                        },
                        new
                        {
                            Id = new Guid("f6b84a2f-96ae-4cb4-80c5-43fb558a15ce"),
                            Name = "Симитли",
                            Postcode = "2730"
                        },
                        new
                        {
                            Id = new Guid("5a9c7eef-eb8c-4cfc-b0ef-638585935dc7"),
                            Name = "Айтос",
                            Postcode = "8500"
                        },
                        new
                        {
                            Id = new Guid("66562e36-0701-4ab0-a0b9-3920798dbb12"),
                            Name = "Ахелой",
                            Postcode = "8217"
                        },
                        new
                        {
                            Id = new Guid("c8b9f55b-ba00-4464-b4f9-e63a182d4003"),
                            Name = "Балчик",
                            Postcode = "9600"
                        },
                        new
                        {
                            Id = new Guid("323f2aa2-a393-484d-b5e5-da0ed160a6ff"),
                            Name = "Банкя",
                            Postcode = "1320"
                        },
                        new
                        {
                            Id = new Guid("2720f6f4-4e3f-46f7-acee-8ff9ca5f496a"),
                            Name = "Баня",
                            Postcode = "4360"
                        },
                        new
                        {
                            Id = new Guid("e3261919-dd08-4ffb-8219-c40de6d42a2b"),
                            Name = "Белоградчик",
                            Postcode = "3900"
                        },
                        new
                        {
                            Id = new Guid("41af1cab-4a81-46bd-8389-148ad69e8f33"),
                            Name = "Бяла",
                            Postcode = "9101"
                        },
                        new
                        {
                            Id = new Guid("b1fb0ac2-710e-4823-943a-b84ef06305c9"),
                            Name = "Велинград",
                            Postcode = "4600"
                        },
                        new
                        {
                            Id = new Guid("bf3734cf-69f9-435a-bb19-ec253bc0e357"),
                            Name = "Доспат",
                            Postcode = "4831"
                        },
                        new
                        {
                            Id = new Guid("8c289a66-5788-4b1a-905b-fb61d20f2ce3"),
                            Name = "Дряново",
                            Postcode = "5370"
                        },
                        new
                        {
                            Id = new Guid("f2fe8f80-7349-4741-a108-859dd91c4932"),
                            Name = "Елхово",
                            Postcode = "8700"
                        },
                        new
                        {
                            Id = new Guid("5bc918f6-9009-48a4-9318-9984fc5af708"),
                            Name = "Казанлък",
                            Postcode = "6100"
                        },
                        new
                        {
                            Id = new Guid("fe75ad00-fab4-4802-b1b4-8233f95d354a"),
                            Name = "Калофер",
                            Postcode = "4370"
                        },
                        new
                        {
                            Id = new Guid("a27ab4ff-34e6-4a22-8ed0-a276c8b4c2e8"),
                            Name = "Карлово",
                            Postcode = "4300"
                        },
                        new
                        {
                            Id = new Guid("f51062fd-6cda-4303-a68a-297bbd6d6a8d"),
                            Name = "Китен",
                            Postcode = "8183"
                        },
                        new
                        {
                            Id = new Guid("c68c37ea-c107-4eba-ad28-058c240f703d"),
                            Name = "Клисура",
                            Postcode = "4341"
                        },
                        new
                        {
                            Id = new Guid("6b8d99ab-64ac-4013-a708-36dc1916fcd4"),
                            Name = "Копривщица",
                            Postcode = "2077"
                        },
                        new
                        {
                            Id = new Guid("aab48f63-26e8-4cc8-85de-a3f53cdbd9cc"),
                            Name = "Лом",
                            Postcode = "3600"
                        },
                        new
                        {
                            Id = new Guid("503ce1bc-1b19-4b78-be45-84838524a351"),
                            Name = "Несебър",
                            Postcode = "8230"
                        },
                        new
                        {
                            Id = new Guid("d550c2fc-fb4a-43c0-9f1e-8a966c7d3523"),
                            Name = "Нова Загора",
                            Postcode = "8900"
                        },
                        new
                        {
                            Id = new Guid("aa81da5d-abc4-45f3-9e91-2fa673f8ad38"),
                            Name = "Обзор",
                            Postcode = "8250"
                        },
                        new
                        {
                            Id = new Guid("653eae4d-d677-40d2-a970-c02335b3954d"),
                            Name = "Павел Баня",
                            Postcode = "6155"
                        },
                        new
                        {
                            Id = new Guid("215130fc-b3a6-40fd-9fc3-33289e53e427"),
                            Name = "Панагюрище",
                            Postcode = "4500"
                        },
                        new
                        {
                            Id = new Guid("51fad88b-a027-4fb4-b902-b942f9fa6e3c"),
                            Name = "Петрич",
                            Postcode = "2850"
                        },
                        new
                        {
                            Id = new Guid("71ae056a-c3ee-4ff6-bc30-64ef7ddecc8f"),
                            Name = "Плиска",
                            Postcode = "9920"
                        },
                        new
                        {
                            Id = new Guid("5b74a4e4-1530-4d43-9ad4-1319f0f49f10"),
                            Name = "Самоков",
                            Postcode = "2000"
                        },
                        new
                        {
                            Id = new Guid("bfe650ce-8380-4e8b-884a-90728a3a8254"),
                            Name = "Сапарева баня",
                            Postcode = "2650"
                        },
                        new
                        {
                            Id = new Guid("312b6ba7-9881-45a4-8aa0-52c8da391045"),
                            Name = "Свети власт",
                            Postcode = "8256"
                        },
                        new
                        {
                            Id = new Guid("3abcfb48-59b5-4867-a32e-e21258b688ff"),
                            Name = "Созопол",
                            Postcode = "8130"
                        },
                        new
                        {
                            Id = new Guid("f10749d6-8751-4383-a4ec-81f6789a6551"),
                            Name = "Троян",
                            Postcode = "5600"
                        },
                        new
                        {
                            Id = new Guid("e29e95e7-3dfd-41a0-810f-25911b7ba77a"),
                            Name = "Трявна",
                            Postcode = "5350"
                        },
                        new
                        {
                            Id = new Guid("3579faf6-648e-4d71-9cd9-233313676b6f"),
                            Name = "Хисаря",
                            Postcode = "4180"
                        },
                        new
                        {
                            Id = new Guid("3736dc12-96fd-4693-b2ce-038f128a796f"),
                            Name = "Боровец",
                            Postcode = "2010"
                        },
                        new
                        {
                            Id = new Guid("b0e50e0f-567a-48e1-9df1-a27ffe519c9c"),
                            Name = "Пампорово",
                            Postcode = "4870"
                        });
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Guests")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationUser");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerNight")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ResortId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Landmarks")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", "User")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Resorts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Resort", "Resort")
                        .WithMany("Rooms")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("RoomReservations")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("RoomReservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Navigation("ReservationUsers");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Navigation("Landmarks");

                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationUsers");

                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RoomReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
