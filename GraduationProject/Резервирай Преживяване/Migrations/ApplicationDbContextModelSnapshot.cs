// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Резервирай_Преживяване.Data;

#nullable disable

namespace Резервирай_Преживяване.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Postcode")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("512afd40-544c-4581-99fc-3eddf94f761f"),
                            Name = "Бургас",
                            Postcode = "8000"
                        },
                        new
                        {
                            Id = new Guid("759022d2-7bc9-4f7f-a35d-b56d727f38f8"),
                            Name = "Варна",
                            Postcode = "9000"
                        },
                        new
                        {
                            Id = new Guid("2b9b5881-be24-470d-85f1-3427fd483117"),
                            Name = "Силистра",
                            Postcode = "7500"
                        },
                        new
                        {
                            Id = new Guid("ac89737c-8605-4959-94f4-84b8efbfe182"),
                            Name = "Търговище",
                            Postcode = "7700"
                        },
                        new
                        {
                            Id = new Guid("406772c8-da5d-4940-bfa2-c40d3cd610ff"),
                            Name = "Ловеч",
                            Postcode = "5500"
                        },
                        new
                        {
                            Id = new Guid("7ce66dd6-d142-455e-828e-41c85497bdba"),
                            Name = "Кърджали",
                            Postcode = "6600"
                        },
                        new
                        {
                            Id = new Guid("536a7a9f-8079-406d-b701-ab86de6b6294"),
                            Name = "Пловдив",
                            Postcode = "4000"
                        },
                        new
                        {
                            Id = new Guid("1923e30c-c65f-41cc-93eb-69ed8ab54e47"),
                            Name = "Добрич",
                            Postcode = "9300"
                        },
                        new
                        {
                            Id = new Guid("db30093e-b3ba-4d21-af2c-21d64874191a"),
                            Name = "София",
                            Postcode = "1000"
                        },
                        new
                        {
                            Id = new Guid("78a284d7-7fb7-41a3-a7cd-df16eb453f04"),
                            Name = "Благоевград",
                            Postcode = "2700"
                        },
                        new
                        {
                            Id = new Guid("79086bb5-8549-46d5-8635-ab165a71667f"),
                            Name = "Пазарджик",
                            Postcode = "4400"
                        },
                        new
                        {
                            Id = new Guid("46bab13c-7c8f-44f6-bfec-41120280bedf"),
                            Name = "Перник",
                            Postcode = "2300"
                        },
                        new
                        {
                            Id = new Guid("07ddae12-18e7-453c-99df-29d1e940af64"),
                            Name = "Плевен",
                            Postcode = "5800"
                        },
                        new
                        {
                            Id = new Guid("847044ed-a751-46cf-8666-9a8b14ad3dc4"),
                            Name = "Видин",
                            Postcode = "3700"
                        },
                        new
                        {
                            Id = new Guid("cdcb0780-f0c1-423e-93a6-fb0cdb5f898a"),
                            Name = "Монтана",
                            Postcode = "3400"
                        },
                        new
                        {
                            Id = new Guid("f7d5fde7-8235-4b9b-815a-2fb8ec597c43"),
                            Name = "Кюстендил",
                            Postcode = "2500"
                        },
                        new
                        {
                            Id = new Guid("b6a1cbc4-7d13-4986-9879-c18d6fb89827"),
                            Name = "Ямбол",
                            Postcode = "8600"
                        },
                        new
                        {
                            Id = new Guid("0fd4d743-fc6a-4455-b371-f6c0d1d1862a"),
                            Name = "Русе",
                            Postcode = "7000"
                        },
                        new
                        {
                            Id = new Guid("4eeb0d36-8732-479f-9069-aec33f95191d"),
                            Name = "Враца",
                            Postcode = "3000"
                        },
                        new
                        {
                            Id = new Guid("41933b7a-1b88-4b68-bc77-19342375366c"),
                            Name = "Велико Търново",
                            Postcode = "5000"
                        },
                        new
                        {
                            Id = new Guid("2778694b-f992-4228-b2db-7307f3bc80fe"),
                            Name = "Шумен",
                            Postcode = "9700"
                        },
                        new
                        {
                            Id = new Guid("6b84c356-7569-4be2-befc-b1867646d898"),
                            Name = "Габрово",
                            Postcode = "5300"
                        },
                        new
                        {
                            Id = new Guid("e6c67e1c-f640-4101-beff-45dd3d9d77ba"),
                            Name = "Разград",
                            Postcode = "7200"
                        },
                        new
                        {
                            Id = new Guid("d5cb58f3-fb50-4819-b5c5-c1a988cb9ce9"),
                            Name = "Сливен",
                            Postcode = "8800"
                        },
                        new
                        {
                            Id = new Guid("81bf0dcb-1d9b-4e7f-ab4c-61d362da401e"),
                            Name = "Смолян",
                            Postcode = "4700"
                        },
                        new
                        {
                            Id = new Guid("a783800c-7dae-4e13-a7da-89d8a45cc71f"),
                            Name = "Стара Загора",
                            Postcode = "6000"
                        },
                        new
                        {
                            Id = new Guid("c84b782e-9b76-4d88-a380-3084452cf4ee"),
                            Name = "Хасково",
                            Postcode = "6300"
                        },
                        new
                        {
                            Id = new Guid("bbf85e3b-e2a5-46d3-a592-54077e0a0b94"),
                            Name = "Банско",
                            Postcode = "2770"
                        },
                        new
                        {
                            Id = new Guid("ad4bec00-69c0-4a99-bd83-4f2b76e9a82a"),
                            Name = "Мелник",
                            Postcode = "2820"
                        },
                        new
                        {
                            Id = new Guid("7ddf7dac-4838-4955-9daa-9c115c225ab1"),
                            Name = "Сандански",
                            Postcode = "2800"
                        },
                        new
                        {
                            Id = new Guid("f2792310-f1bd-4f5a-983e-a79cbc1e81bf"),
                            Name = "Симитли",
                            Postcode = "2730"
                        },
                        new
                        {
                            Id = new Guid("73ae30f4-3946-4e91-82c5-788a624189c6"),
                            Name = "Айтос",
                            Postcode = "8500"
                        },
                        new
                        {
                            Id = new Guid("b570ede9-c680-4de0-bb31-4e9d6b83422f"),
                            Name = "Ахелой",
                            Postcode = "8217"
                        },
                        new
                        {
                            Id = new Guid("a910ff89-231c-4d33-bcbb-beba8b1468e1"),
                            Name = "Балчик",
                            Postcode = "9600"
                        },
                        new
                        {
                            Id = new Guid("858ed065-dee8-4763-b255-b1a8586877a9"),
                            Name = "Банкя",
                            Postcode = "1320"
                        },
                        new
                        {
                            Id = new Guid("0d5eeee2-5294-483d-b685-9763e7d5a234"),
                            Name = "Баня",
                            Postcode = "4360"
                        },
                        new
                        {
                            Id = new Guid("d7bbab7e-7009-4a23-8dc5-36be57d1bbc2"),
                            Name = "Белоградчик",
                            Postcode = "3900"
                        },
                        new
                        {
                            Id = new Guid("515893ee-afd0-41a2-84b1-3bca6fb9b9bb"),
                            Name = "Бяла",
                            Postcode = "9101"
                        },
                        new
                        {
                            Id = new Guid("58501a7b-720e-4e30-a0fb-40bfd98e618d"),
                            Name = "Велинград",
                            Postcode = "4600"
                        },
                        new
                        {
                            Id = new Guid("46c7048d-109a-4879-ac18-f6e3302a8f54"),
                            Name = "Доспат",
                            Postcode = "4831"
                        },
                        new
                        {
                            Id = new Guid("a49513bb-9164-4a12-8407-6823553e940d"),
                            Name = "Дряново",
                            Postcode = "5370"
                        },
                        new
                        {
                            Id = new Guid("ee115ea7-51a4-4caf-a06a-f9eaf63e13b6"),
                            Name = "Елхово",
                            Postcode = "8700"
                        },
                        new
                        {
                            Id = new Guid("7f15419e-4889-4408-b27d-df61cd01bc28"),
                            Name = "Казанлък",
                            Postcode = "6100"
                        },
                        new
                        {
                            Id = new Guid("e1c1a12a-0327-415f-a5fe-5690b60c0411"),
                            Name = "Калофер",
                            Postcode = "4370"
                        },
                        new
                        {
                            Id = new Guid("9f107d27-8249-4abe-b730-af87996b80d7"),
                            Name = "Карлово",
                            Postcode = "4300"
                        },
                        new
                        {
                            Id = new Guid("5badf7b0-a39f-4e20-b94f-66e7a17d158e"),
                            Name = "Китен",
                            Postcode = "8183"
                        },
                        new
                        {
                            Id = new Guid("fd445aa0-94f0-4a9f-90b8-597dfb526312"),
                            Name = "Клисура",
                            Postcode = "4341"
                        },
                        new
                        {
                            Id = new Guid("72a990e7-191c-4318-ac79-7935f45e82e9"),
                            Name = "Копривщица",
                            Postcode = "2077"
                        },
                        new
                        {
                            Id = new Guid("46827fff-2f81-4dbb-8d4b-83aba1513f34"),
                            Name = "Лом",
                            Postcode = "3600"
                        },
                        new
                        {
                            Id = new Guid("6209b622-11b9-4bdf-b8d0-bc80d852e6c6"),
                            Name = "Несебър",
                            Postcode = "8230"
                        },
                        new
                        {
                            Id = new Guid("aa097bf3-dc41-46d8-bcc9-f2f7ee9c82b3"),
                            Name = "Нова Загора",
                            Postcode = "8900"
                        },
                        new
                        {
                            Id = new Guid("eac1252b-85ee-4a23-a635-14591c1fffce"),
                            Name = "Обзор",
                            Postcode = "8250"
                        },
                        new
                        {
                            Id = new Guid("f91d4417-344d-4096-92c0-77b6227f495d"),
                            Name = "Павел Баня",
                            Postcode = "6155"
                        },
                        new
                        {
                            Id = new Guid("8f0bb610-3725-472a-b4a9-dad9f7a68d64"),
                            Name = "Панагюрище",
                            Postcode = "4500"
                        },
                        new
                        {
                            Id = new Guid("c54d4ae8-65a5-4a4a-ba4d-714497f1c628"),
                            Name = "Петрич",
                            Postcode = "2850"
                        },
                        new
                        {
                            Id = new Guid("5fb103af-f786-4f6b-93de-34935bf07cca"),
                            Name = "Плиска",
                            Postcode = "9920"
                        },
                        new
                        {
                            Id = new Guid("7afc8e30-f08d-4775-a87b-a76894c1cbfb"),
                            Name = "Самоков",
                            Postcode = "2000"
                        },
                        new
                        {
                            Id = new Guid("6c969bba-394a-4239-a272-8992ab9b5acf"),
                            Name = "Сапарева баня",
                            Postcode = "2650"
                        },
                        new
                        {
                            Id = new Guid("9429830e-ccbd-4451-8aaf-3fbd460e3ecf"),
                            Name = "Свети власт",
                            Postcode = "8256"
                        },
                        new
                        {
                            Id = new Guid("1cb68e36-53c4-45dd-8f13-5c90eca75b83"),
                            Name = "Созопол",
                            Postcode = "8130"
                        },
                        new
                        {
                            Id = new Guid("9a975b42-cca2-41f3-a43b-9da1034c8af6"),
                            Name = "Троян",
                            Postcode = "5600"
                        },
                        new
                        {
                            Id = new Guid("f425a0fb-b1fb-4e0f-aadd-8aeef73a799c"),
                            Name = "Трявна",
                            Postcode = "5350"
                        },
                        new
                        {
                            Id = new Guid("8f5aa6b7-b09e-4bbd-8c86-2b026a3632ba"),
                            Name = "Хисаря",
                            Postcode = "4180"
                        },
                        new
                        {
                            Id = new Guid("521680b7-5bf4-46f6-a95a-d6df64d0ce57"),
                            Name = "Боровец",
                            Postcode = "2010"
                        },
                        new
                        {
                            Id = new Guid("694c17d2-6917-49cb-bf5b-217d4ecc3815"),
                            Name = "Пампорово",
                            Postcode = "4870"
                        });
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Guests")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ReservationId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationUser");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stars")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Bedrooms")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerNight")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ResortId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResortId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Image", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Landmark", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Landmarks")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.ReservationUser", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", "User")
                        .WithMany("ReservationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.City", "City")
                        .WithMany("Resorts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Resort", "Resort")
                        .WithMany("Rooms")
                        .HasForeignKey("ResortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.RoomReservation", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Entities.Reservation", "Reservation")
                        .WithMany("RoomReservations")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Entities.Room", "Room")
                        .WithMany("RoomReservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Резервирай_Преживяване.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Account.User", b =>
                {
                    b.Navigation("ReservationUsers");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.City", b =>
                {
                    b.Navigation("Landmarks");

                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationUsers");

                    b.Navigation("RoomReservations");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Resort", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Резервирай_Преживяване.Data.Entities.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("RoomReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
